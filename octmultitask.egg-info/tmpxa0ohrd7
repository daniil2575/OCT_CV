Metadata-Version: 2.4
Name: octmultitask
Version: 0.1.0
Summary: Multitask OCT segmentation & classification
Author: Daniil
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: torch>=2.2
Requires-Dist: torchvision>=0.17
Requires-Dist: numpy>=1.24
Requires-Dist: opencv-python>=4.8
Requires-Dist: albumentations>=1.4
Requires-Dist: pillow>=10.0
Requires-Dist: scikit-learn>=1.3
Requires-Dist: pyyaml>=6.0
Requires-Dist: tqdm>=4.66
Requires-Dist: fastapi>=0.111
Requires-Dist: uvicorn>=0.30
Requires-Dist: python-dotenv>=1.0
Provides-Extra: optuna
Requires-Dist: optuna>=3.6; extra == "optuna"
Provides-Extra: api
Requires-Dist: pydantic>=2.7; extra == "api"

# octmultitask

Мультитаск-модель для OCT/FUNDUS: сегментация классов (PNG-маски, индексная разметка), бинарная классификация наличия признаков, постпроцессинг, API-сервис.

## Быстрый старт
```bash
# 1) установка
pip install -U pip
pip install -e .
cp .env.example .env

# 2) подготовка данных (для OCT)
python data/roboflow_download.py --workspace *** --project *** --version 1 --modality OCT
python data/prepare_masks.py --root data_store/OCT/train --classes config/classes.yaml
python data/split_patientwise.py --root data_store/OCT --ratio 0.8 0.1 0.1

# 3) обучение
python training/train.py --config config/project.yaml

# 4) инференс на папке
python inference/predict.py --images data_store/OCT/test/images --checkpoint runs/best.pt --out runs/preds

# 5) API
***
```

## Формат масок
`masks/<stem>.png` — однослойная PNG с индексами классов: 0=фон, 1..N — классы в порядке из `config/classes.yaml`.

## Задачи
- **Seg**: per-pixel многоклассовая (sigmoid per-class, one-vs-all) или softmax — по конфигу.
- **Cls**: мульти-лейбл по глобальному пулу признаков.

## Лицензия
MIT
